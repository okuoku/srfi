#! /usr/bin/env scheme-script
(import (ikarus) (srfi registry))

(define (problem msg . args)
  (apply error 'make-alias-libraries msg args))


(for-each ; output to file <alias>.ss:
          (lambda (x)
            (let* ([primary-import `(srfi ,(caar x))]
                   [primary-filename (cdar x)]
                   [output-aliases (cdr x)]
                   [get-exports (lambda (lib-form) (cdr (caddr lib-form)))]
                   [exports (get-exports (with-input-from-file primary-filename read))])
              (for-each (lambda (oa)
                          (with-output-to-file (string-append (symbol->string oa) ".ss")
                            (lambda ()
                              (printf ";;; Automatically generated by ~a\n" (car (command-line)))
                              (pretty-print 
                                `(library (srfi ,oa)
                                   (export ,@exports)
                                   (import ,primary-import))))
                            'replace))
                        output-aliases)))
          ; construct: 
          ;   ([(primary-name . primary-filename) output-alias ...] ...)
          (map (lambda (a-spec)
                 (let ([primary (cadr (car a-spec))]
                       [lib-al (map (lambda (la) 
                                      (if (list? la)
                                        (cadr la)
                                        la))
                                    (cadr a-spec))])
                   `((,primary . ,(string-append (symbol->string primary) ".ss"))
                     ,@lib-al)))
               ; aliases is structured: 
               ;   ([primary [library-aliases ...] [feature-aliases ...]] ...)
               aliases))
